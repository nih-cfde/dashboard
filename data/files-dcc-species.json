<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
  "http://www.w3.org/TR/html4/loose.dtd">
<html>
  <head>
    <title>deriva.core.datapath.DataPathException: The request is malformed. Query run time limit exceeded.
400 Client Error: Bad Request for url: [https://app-dev.nih-cfde.org/ermrest/catalog/12/attributegroup/file:=CFDE:file/pipt:=(file:project_id_namespace,file:project_local_id)=(CFDE:project_in_project_transitive:member_project_id_namespace,CFDE:project_in_project_transitive:member_project_local_id)/project_root:=(pipt:leader_project_id_namespace,pipt:leader_project_local_id)=(CFDE:project_root:project_id_namespace,CFDE:project_root:project_local_id)/project:=CFDE:project/$file/file_describes_biosample:=CFDE:file_describes_biosample/biosample:=CFDE:biosample/biosample_from_subject:=CFDE:biosample_from_subject/subject:=CFDE:subject/srt:=CFDE:subject_role_taxonomy/subrole:=CFDE:subject_role/subrole:name=single%20organism/$srt/species:=CFDE:ncbi_taxonomy/species:clade=species/project_RID:=project:RID,species_id:=species:id;num_files:=cnt_d(file:RID),num_bytes:=sum(file:size_in_bytes),project_id_namespace:=project:id_namespace,project_local_id:=project:local_id,project_name:=project:name,species_name:=species:name] Details: b'400 Bad Request\nThe request is malformed. Query run time limit exceeded.\n' // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css"
        type="text/css">
    <!-- We need to make sure this has a favicon so that the debugger does
         not by accident trigger a request to /favicon.ico which might
         change the application state. -->
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=jquery.js"></script>
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script type="text/javascript">
      var TRACEBACK = 4381199904,
          CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "HGDf6hwWXZa4Xx7FJ0Y2";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>deriva.core.datapath.DataPathException</h1>
<div class="detail">
  <p class="errormsg">deriva.core.datapath.DataPathException: The request is malformed. Query run time limit exceeded.
400 Client Error: Bad Request for url: [https://app-dev.nih-cfde.org/ermrest/catalog/12/attributegroup/file:=CFDE:file/pipt:=(file:project_id_namespace,file:project_local_id)=(CFDE:project_in_project_transitive:member_project_id_namespace,CFDE:project_in_project_transitive:member_project_local_id)/project_root:=(pipt:leader_project_id_namespace,pipt:leader_project_local_id)=(CFDE:project_root:project_id_namespace,CFDE:project_root:project_local_id)/project:=CFDE:project/$file/file_describes_biosample:=CFDE:file_describes_biosample/biosample:=CFDE:biosample/biosample_from_subject:=CFDE:biosample_from_subject/subject:=CFDE:subject/srt:=CFDE:subject_role_taxonomy/subrole:=CFDE:subject_role/subrole:name=single%20organism/$srt/species:=CFDE:ncbi_taxonomy/species:clade=species/project_RID:=project:RID,species_id:=species:id;num_files:=cnt_d(file:RID),num_bytes:=sum(file:size_in_bytes),project_id_namespace:=project:id_namespace,project_local_id:=project:local_id,project_name:=project:name,species_name:=species:name] Details: b'400 Bad Request\nThe request is malformed. Query run time limit exceeded.\n'</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  
  <ul><li><div class="frame" id="frame-4381177552">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/datapath.py"</cite>,
      line <em class="line">525</em>,
      in <code class="function">fetcher</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>limiting = '?limit=%d' % limit if limit else ''</pre>
<pre class="line before"><span class="ws">            </span>sorting = '@sort(' + ','.join([col._uname for col in sort]) + ')' if sort else ''</pre>
<pre class="line before"><span class="ws">            </span>path = base_path + sorting + limiting</pre>
<pre class="line before"><span class="ws">            </span>logger.debug(&quot;Fetching &quot; + path)</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line current"><span class="ws">                </span>resp = catalog.get(path)</pre>
<pre class="line after"><span class="ws">                </span>return resp.json()</pre>
<pre class="line after"><span class="ws">            </span>except HTTPError as e:</pre>
<pre class="line after"><span class="ws">                </span>logger.debug(e.response.text)</pre>
<pre class="line after"><span class="ws">                </span>if 400 &lt;= e.response.status_code &lt; 500:</pre>
<pre class="line after"><span class="ws">                    </span>raise DataPathException(_http_error_message(e), e)</pre></div>
</div>

<li><div class="frame" id="frame-4381176400">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/deriva_binding.py"</cite>,
      line <em class="line">283</em>,
      in <code class="function">get</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if headers is None:</pre>
<pre class="line before"><span class="ws">            </span>headers = {}</pre>
<pre class="line before"><span class="ws">        </span>url, headers, prev_response = self._pre_get(path, headers)</pre>
<pre class="line current"><span class="ws">        </span>r = self._raise_for_status_304(</pre>
<pre class="line after"><span class="ws">            </span>self._session.get(url, headers=headers),</pre>
<pre class="line after"><span class="ws">            </span>prev_response,</pre>
<pre class="line after"><span class="ws">            </span>raise_not_modified</pre>
<pre class="line after"><span class="ws">        </span>)</pre>
<pre class="line after"><span class="ws">        </span>if self._caching and not stream:</pre></div>
</div>

<li><div class="frame" id="frame-4381177360">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/deriva_binding.py"</cite>,
      line <em class="line">202</em>,
      in <code class="function">_raise_for_status_304</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>if raise_not_modified:</pre>
<pre class="line before"><span class="ws">                </span>raise NotModified(p or r)</pre>
<pre class="line before"><span class="ws">            </span>else:</pre>
<pre class="line before"><span class="ws">                </span>return p or r</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>_response_raise_for_status(r)</pre>
<pre class="line after"><span class="ws">        </span>setattr(r, 'raise_for_status', _response_raise_for_status.__get__(r))</pre>
<pre class="line after"><span class="ws">        </span>return r</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@staticmethod</pre>
<pre class="line after"><span class="ws">    </span>def _raise_for_status_412(r):</pre></div>
</div>

<li><div class="frame" id="frame-4381178608">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/deriva_binding.py"</cite>,
      line <em class="line">97</em>,
      in <code class="function">_response_raise_for_status</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>instance or manually invoked on one.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">    </span>if 400 &lt;= self.status_code &lt; 600:</pre>
<pre class="line before"><span class="ws">        </span>details = &quot; Details: %s&quot;</pre>
<pre class="line current"><span class="ws">        </span>raise requests.HTTPError(</pre>
<pre class="line after"><span class="ws">            </span>u'%s %s Error: %s for url: [%s]%s' % (</pre>
<pre class="line after"><span class="ws">                </span>self.status_code,</pre>
<pre class="line after"><span class="ws">                </span>'Client' if self.status_code &lt; 500 else 'Server',</pre>
<pre class="line after"><span class="ws">                </span>self.reason,</pre>
<pre class="line after"><span class="ws">                </span>self.url,</pre></div>
</div>

<li><div class="exc-divider">During handling of the above exception, another exception occurred:</div>
<li><div class="frame" id="frame-4381177984">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2464</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def __call__(self, environ, start_response):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app` which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to applying middleware.&quot;&quot;&quot;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def __repr__(self):</pre>
<pre class="line after"><span class="ws">        </span>return &quot;&lt;%s %r&gt;&quot; % (self.__class__.__name__, self.name)</pre></div>
</div>

<li><div class="frame" id="frame-4381177840">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2450</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-4381177600">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1867</em>,
      in <code class="function">handle_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span># if we want to repropagate the exception, we can attempt to</pre>
<pre class="line before"><span class="ws">            </span># raise it with the whole traceback in case we can do that</pre>
<pre class="line before"><span class="ws">            </span># (the function was actually called from the except part)</pre>
<pre class="line before"><span class="ws">            </span># otherwise, we just raise the error again</pre>
<pre class="line before"><span class="ws">            </span>if exc_value is e:</pre>
<pre class="line current"><span class="ws">                </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">            </span>else:</pre>
<pre class="line after"><span class="ws">                </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>self.log_exception((exc_type, exc_value, tb))</pre>
<pre class="line after"><span class="ws">        </span>server_error = InternalServerError()</pre></div>
</div>

<li><div class="frame" id="frame-4381177696">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/_compat.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">reraise</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>import collections.abc as collections_abc</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>iterkeys = lambda d: d.iterkeys()</pre></div>
</div>

<li><div class="frame" id="frame-4381177456">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">2447</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-4381177504">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1952</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Given the return value from a view function this finalizes</pre>
<pre class="line after"><span class="ws">        </span>the request by converting it into a response and invoking the</pre></div>
</div>

<li><div class="frame" id="frame-4381176016">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1821</em>,
      in <code class="function">handle_user_exception</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>return self.handle_http_exception(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>handler = self._find_error_handler(e)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>if handler is None:</pre>
<pre class="line current"><span class="ws">            </span>reraise(exc_type, exc_value, tb)</pre>
<pre class="line after"><span class="ws">        </span>return handler(e)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def handle_exception(self, e):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Handle an exception that did not have an error handler</pre>
<pre class="line after"><span class="ws">        </span>associated with it, or that was raised from an error handler.</pre></div>
</div>

<li><div class="frame" id="frame-4381176928">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/_compat.py"</cite>,
      line <em class="line">39</em>,
      in <code class="function">reraise</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>import collections.abc as collections_abc</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>def reraise(tp, value, tb=None):</pre>
<pre class="line before"><span class="ws">        </span>if value.__traceback__ is not tb:</pre>
<pre class="line before"><span class="ws">            </span>raise value.with_traceback(tb)</pre>
<pre class="line current"><span class="ws">        </span>raise value</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>implements_to_string = _identity</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>else:</pre>
<pre class="line after"><span class="ws">    </span>iterkeys = lambda d: d.iterkeys()</pre></div>
</div>

<li><div class="frame" id="frame-4381176976">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1950</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>self.try_trigger_before_first_request_functions()</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(self, rv, from_error_handler=False):</pre></div>
</div>

<li><div class="frame" id="frame-4381176832">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py"</cite>,
      line <em class="line">1936</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>getattr(rule, &quot;provide_automatic_options&quot;, False)</pre>
<pre class="line before"><span class="ws">            </span>and req.method == &quot;OPTIONS&quot;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line current"><span class="ws">        </span>return self.view_functions[rule.endpoint](**req.view_args)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self):</pre>
<pre class="line after"><span class="ws">        </span>&quot;&quot;&quot;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-4381176880">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/api/app/app.py"</cite>,
      line <em class="line">441</em>,
      in <code class="function">grouped_stats_other</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span># input error</pre>
<pre class="line before"><span class="ws">    </span>if err is not None:</pre>
<pre class="line before"><span class="ws">        </span>return _error_response(err, 404)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># returns list of DCCGrouping</pre>
<pre class="line current"><span class="ws">    </span>res = _grouped_stats_aux(variable, grouping1, maxgroups1, grouping2, maxgroups2)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># merge groups2 (i.e., merge counts within each DCCGrouping)</pre>
<pre class="line after"><span class="ws">    </span>if maxgroups2 is not None:</pre>
<pre class="line after"><span class="ws">        </span># enforce group2 maximum within each group independently</pre>
<pre class="line after"><span class="ws">        </span>res = _merge_within_groups_local(res, maxgroups2, grouping1)</pre></div>
</div>

<li><div class="frame" id="frame-4381176448">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/api/app/app.py"</cite>,
      line <em class="line">235</em>,
      in <code class="function">_grouped_stats_aux</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span>vm = VARIABLE_MAP[variable]</pre>
<pre class="line before"><span class="ws">    </span>gm1 = GROUPING_MAP[grouping1]</pre>
<pre class="line before"><span class="ws">    </span>gm2 = GROUPING_MAP[grouping2]</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">    </span>counts = list(StatsQuery(helper).entity(vm['entity']).dimension(gm1['dimension']).dimension(gm2['dimension']).fetch())</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>dim1_counts = {}</pre>
<pre class="line after"><span class="ws">    </span>res = []</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span># StatsQuery output looks like this:</pre></div>
</div>

<li><div class="frame" id="frame-4381176688">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/api/app/cfde-deriva-epic1_202009/cfde_deriva/dashboard_queries.py"</cite>,
      line <em class="line">306</em>,
      in <code class="function">fetch</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>def fetch(self):</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;Fetch results for configured query&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>if self.path is None:</pre>
<pre class="line before"><span class="ws">            </span>raise TypeError('Cannot call .fetch() method on a StatsQuery instance prior to calling .entity() method.')</pre>
<pre class="line before"><span class="ws">        </span>if self.grpk_funcs:</pre>
<pre class="line current"><span class="ws">            </span>return self.path.groupby(*[</pre>
<pre class="line after"><span class="ws">                </span>grpk_func(self.path)</pre>
<pre class="line after"><span class="ws">                </span>for grpk_func in self.grpk_funcs</pre>
<pre class="line after"><span class="ws">            </span>]).attributes(*[</pre>
<pre class="line after"><span class="ws">                </span>attr_func(self.path)</pre>
<pre class="line after"><span class="ws">                </span>for attr_func in self.attr_funcs</pre></div>
</div>

<li><div class="frame" id="frame-4381176304">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/datapath.py"</cite>,
      line <em class="line">626</em>,
      in <code class="function">fetch</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>:param limit: maximum number of results to fetch from the catalog.</pre>
<pre class="line before"><span class="ws">        </span>:return: self</pre>
<pre class="line before"><span class="ws">        </span>&quot;&quot;&quot;</pre>
<pre class="line before"><span class="ws">        </span>limit = int(limit) if limit else None</pre>
<pre class="line current"><span class="ws">        </span>self._results_doc = self._fetcher_fn(limit, self._sort_keys)</pre>
<pre class="line after"><span class="ws">        </span>logger.debug(&quot;Fetched %d entities&quot; % len(self._results_doc))</pre>
<pre class="line after"><span class="ws">        </span>return self</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>class _TableWrapper (object):</pre></div>
</div>

<li><div class="frame" id="frame-4381176592">
  <h4>File <cite class="filename">"/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/datapath.py"</cite>,
      line <em class="line">530</em>,
      in <code class="function">fetcher</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>resp = catalog.get(path)</pre>
<pre class="line before"><span class="ws">                </span>return resp.json()</pre>
<pre class="line before"><span class="ws">            </span>except HTTPError as e:</pre>
<pre class="line before"><span class="ws">                </span>logger.debug(e.response.text)</pre>
<pre class="line before"><span class="ws">                </span>if 400 &lt;= e.response.status_code &lt; 500:</pre>
<pre class="line current"><span class="ws">                    </span>raise DataPathException(_http_error_message(e), e)</pre>
<pre class="line after"><span class="ws">                </span>else:</pre>
<pre class="line after"><span class="ws">                    </span>raise e</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>return _ResultSet(self._base_uri + base_path, fetcher)</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>
</ul>
  <blockquote>deriva.core.datapath.DataPathException: The request is malformed. Query run time limit exceeded.
400 Client Error: Bad Request for url: [https://app-dev.nih-cfde.org/ermrest/catalog/12/attributegroup/file:=CFDE:file/pipt:=(file:project_id_namespace,file:project_local_id)=(CFDE:project_in_project_transitive:member_project_id_namespace,CFDE:project_in_project_transitive:member_project_local_id)/project_root:=(pipt:leader_project_id_namespace,pipt:leader_project_local_id)=(CFDE:project_root:project_id_namespace,CFDE:project_root:project_local_id)/project:=CFDE:project/$file/file_describes_biosample:=CFDE:file_describes_biosample/biosample:=CFDE:biosample/biosample_from_subject:=CFDE:biosample_from_subject/subject:=CFDE:subject/srt:=CFDE:subject_role_taxonomy/subrole:=CFDE:subject_role/subrole:name=single%20organism/$srt/species:=CFDE:ncbi_taxonomy/species:clade=species/project_RID:=project:RID,species_id:=species:id;num_files:=cnt_d(file:RID),num_bytes:=sum(file:size_in_bytes),project_id_namespace:=project:id_namespace,project_local_id:=project:local_id,project_name:=project:name,species_name:=species:name] Details: b'400 Bad Request\nThe request is malformed. Query run time limit exceeded.\n'</blockquote>
</div>

<div class="plain">
  <form action="/?__debugger__=yes&amp;cmd=paste" method="post">
    <p>
      <input type="hidden" name="language" value="pytb">
      This is the Copy/Paste friendly version of the traceback.  <span
      class="pastemessage">You can also paste this traceback into
      a <a href="https://gist.github.com/">gist</a>:
      <input type="submit" value="create paste"></span>
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/datapath.py&quot;, line 525, in fetcher
    resp = catalog.get(path)
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/deriva_binding.py&quot;, line 283, in get
    r = self._raise_for_status_304(
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/deriva_binding.py&quot;, line 202, in _raise_for_status_304
    _response_raise_for_status(r)
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/deriva_binding.py&quot;, line 97, in _response_raise_for_status
    raise requests.HTTPError(
requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: [https://app-dev.nih-cfde.org/ermrest/catalog/12/attributegroup/file:=CFDE:file/pipt:=(file:project_id_namespace,file:project_local_id)=(CFDE:project_in_project_transitive:member_project_id_namespace,CFDE:project_in_project_transitive:member_project_local_id)/project_root:=(pipt:leader_project_id_namespace,pipt:leader_project_local_id)=(CFDE:project_root:project_id_namespace,CFDE:project_root:project_local_id)/project:=CFDE:project/$file/file_describes_biosample:=CFDE:file_describes_biosample/biosample:=CFDE:biosample/biosample_from_subject:=CFDE:biosample_from_subject/subject:=CFDE:subject/srt:=CFDE:subject_role_taxonomy/subrole:=CFDE:subject_role/subrole:name=single%20organism/$srt/species:=CFDE:ncbi_taxonomy/species:clade=species/project_RID:=project:RID,species_id:=species:id;num_files:=cnt_d(file:RID),num_bytes:=sum(file:size_in_bytes),project_id_namespace:=project:id_namespace,project_local_id:=project:local_id,project_name:=project:name,species_name:=species:name] Details: b'400 Bad Request\nThe request is malformed. Query run time limit exceeded.\n'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 2450, in wsgi_app
    response = self.handle_exception(e)
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/_compat.py&quot;, line 39, in reraise
    raise value
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/_compat.py&quot;, line 39, in reraise
    raise value
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py&quot;, line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File &quot;/Users/jcrabtree/CFDE/api/app/app.py&quot;, line 441, in grouped_stats_other
    res = _grouped_stats_aux(variable, grouping1, maxgroups1, grouping2, maxgroups2)
  File &quot;/Users/jcrabtree/CFDE/api/app/app.py&quot;, line 235, in _grouped_stats_aux
    counts = list(StatsQuery(helper).entity(vm['entity']).dimension(gm1['dimension']).dimension(gm2['dimension']).fetch())
  File &quot;/Users/jcrabtree/CFDE/api/app/cfde-deriva-epic1_202009/cfde_deriva/dashboard_queries.py&quot;, line 306, in fetch
    return self.path.groupby(*[
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/datapath.py&quot;, line 626, in fetch
    self._results_doc = self._fetcher_fn(limit, self._sort_keys)
  File &quot;/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/datapath.py&quot;, line 530, in fetcher
    raise DataPathException(_http_error_message(e), e)
deriva.core.datapath.DataPathException: The request is malformed. Query run time limit exceeded.
400 Client Error: Bad Request for url: [https://app-dev.nih-cfde.org/ermrest/catalog/12/attributegroup/file:=CFDE:file/pipt:=(file:project_id_namespace,file:project_local_id)=(CFDE:project_in_project_transitive:member_project_id_namespace,CFDE:project_in_project_transitive:member_project_local_id)/project_root:=(pipt:leader_project_id_namespace,pipt:leader_project_local_id)=(CFDE:project_root:project_id_namespace,CFDE:project_root:project_local_id)/project:=CFDE:project/$file/file_describes_biosample:=CFDE:file_describes_biosample/biosample:=CFDE:biosample/biosample_from_subject:=CFDE:biosample_from_subject/subject:=CFDE:subject/srt:=CFDE:subject_role_taxonomy/subrole:=CFDE:subject_role/subrole:name=single%20organism/$srt/species:=CFDE:ncbi_taxonomy/species:clade=species/project_RID:=project:RID,species_id:=species:id;num_files:=cnt_d(file:RID),num_bytes:=sum(file:size_in_bytes),project_id_namespace:=project:id_namespace,project_local_id:=project:local_id,project_name:=project:name,species_name:=species:name] Details: b'400 Bad Request\nThe request is malformed. Query run time limit exceeded.\n'</textarea>
  </form>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/datapath.py", line 525, in fetcher
    resp = catalog.get(path)
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/deriva_binding.py", line 283, in get
    r = self._raise_for_status_304(
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/deriva_binding.py", line 202, in _raise_for_status_304
    _response_raise_for_status(r)
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/deriva_binding.py", line 97, in _response_raise_for_status
    raise requests.HTTPError(
requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: [https://app-dev.nih-cfde.org/ermrest/catalog/12/attributegroup/file:=CFDE:file/pipt:=(file:project_id_namespace,file:project_local_id)=(CFDE:project_in_project_transitive:member_project_id_namespace,CFDE:project_in_project_transitive:member_project_local_id)/project_root:=(pipt:leader_project_id_namespace,pipt:leader_project_local_id)=(CFDE:project_root:project_id_namespace,CFDE:project_root:project_local_id)/project:=CFDE:project/$file/file_describes_biosample:=CFDE:file_describes_biosample/biosample:=CFDE:biosample/biosample_from_subject:=CFDE:biosample_from_subject/subject:=CFDE:subject/srt:=CFDE:subject_role_taxonomy/subrole:=CFDE:subject_role/subrole:name=single%20organism/$srt/species:=CFDE:ncbi_taxonomy/species:clade=species/project_RID:=project:RID,species_id:=species:id;num_files:=cnt_d(file:RID),num_bytes:=sum(file:size_in_bytes),project_id_namespace:=project:id_namespace,project_local_id:=project:local_id,project_name:=project:name,species_name:=species:name] Details: b'400 Bad Request\nThe request is malformed. Query run time limit exceeded.\n'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py", line 2464, in __call__
    return self.wsgi_app(environ, start_response)
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py", line 2450, in wsgi_app
    response = self.handle_exception(e)
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py", line 1867, in handle_exception
    reraise(exc_type, exc_value, tb)
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/_compat.py", line 39, in reraise
    raise value
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py", line 2447, in wsgi_app
    response = self.full_dispatch_request()
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py", line 1952, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py", line 1821, in handle_user_exception
    reraise(exc_type, exc_value, tb)
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/_compat.py", line 39, in reraise
    raise value
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py", line 1950, in full_dispatch_request
    rv = self.dispatch_request()
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/flask/app.py", line 1936, in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
  File "/Users/jcrabtree/CFDE/api/app/app.py", line 441, in grouped_stats_other
    res = _grouped_stats_aux(variable, grouping1, maxgroups1, grouping2, maxgroups2)
  File "/Users/jcrabtree/CFDE/api/app/app.py", line 235, in _grouped_stats_aux
    counts = list(StatsQuery(helper).entity(vm['entity']).dimension(gm1['dimension']).dimension(gm2['dimension']).fetch())
  File "/Users/jcrabtree/CFDE/api/app/cfde-deriva-epic1_202009/cfde_deriva/dashboard_queries.py", line 306, in fetch
    return self.path.groupby(*[
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/datapath.py", line 626, in fetch
    self._results_doc = self._fetcher_fn(limit, self._sort_keys)
  File "/Users/jcrabtree/CFDE/venv/lib/python3.8/site-packages/deriva/core/datapath.py", line 530, in fetcher
    raise DataPathException(_http_error_message(e), e)
deriva.core.datapath.DataPathException: The request is malformed. Query run time limit exceeded.
400 Client Error: Bad Request for url: [https://app-dev.nih-cfde.org/ermrest/catalog/12/attributegroup/file:=CFDE:file/pipt:=(file:project_id_namespace,file:project_local_id)=(CFDE:project_in_project_transitive:member_project_id_namespace,CFDE:project_in_project_transitive:member_project_local_id)/project_root:=(pipt:leader_project_id_namespace,pipt:leader_project_local_id)=(CFDE:project_root:project_id_namespace,CFDE:project_root:project_local_id)/project:=CFDE:project/$file/file_describes_biosample:=CFDE:file_describes_biosample/biosample:=CFDE:biosample/biosample_from_subject:=CFDE:biosample_from_subject/subject:=CFDE:subject/srt:=CFDE:subject_role_taxonomy/subrole:=CFDE:subject_role/subrole:name=single%20organism/$srt/species:=CFDE:ncbi_taxonomy/species:clade=species/project_RID:=project:RID,species_id:=species:id;num_files:=cnt_d(file:RID),num_bytes:=sum(file:size_in_bytes),project_id_namespace:=project:id_namespace,project_local_id:=project:local_id,project_name:=project:name,species_name:=species:name] Details: b'400 Bad Request\nThe request is malformed. Query run time limit exceeded.\n'

-->
